# Using a Python dictionary to act as an adjacency list
graph = {
  'A' : ['C','D','B'],
  'C' : ['E'],
  'D' : ['F'],
  'B' : [],
  'E' : [],
  'F' : []
}

visited = set() # Set to keep track of visited nodes of graph.

def dfs(visited, graph, node):  #function for dfs 
    if node not in visited:
        print (node)
        visited.add(node)
        for neighbour in graph[node]:
            dfs(visited, graph, neighbour)

# Driver Code
print("Following is the Depth-First Search")
dfs(visited, graph, 'A')



#BFS

graph = {
  'A' : ['C','D','B'],
  'C' : ['E'],
  'D' : ['F'],
  'B' : [],
  'E' : [],
  'F' : []
}

visited = [] # List for visited nodes.
Queue = []

def bfs(visited, graph, node):  #function for bfs
     visited.append(node)
      queue.append(node)

      while queue:    #Creating loop to visit each node
          m = queue.pop(0)
          print (m)

          for neighbour in graph[m]:
             if neighbour.append(neighbour)
                visited.append(neighbour)
                 queue.append(neighbour)

#Driver Code
print(“Following is the Breadth-First Search”)
bfs(visited, graph, ‘A’)   #function calling 
